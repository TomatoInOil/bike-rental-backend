name: Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bike-rental-backend
  DEPLOY_PATH: ~/bike-rental-backend
  REP_OWNER: TomatoInOil

defaults:
  run:
    working-directory: .

jobs:
  build_and_push:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    needs: check_if_merged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: GitHub Packages login
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
          USERNAME: ${{ github.actor}}
          GITHUB: ${{ env.REGISTRY }}
        run: echo "$GITHUB_TOKEN" | docker login "$GITHUB" -u "$USERNAME" --password-stdin


      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: prod
    needs: build_and_push
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Copy docker-compose file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "./infra/docker-compose.yml, ./infra/default.conf"
          target: ${{ env.DEPLOY_PATH }}
          strip_components: 1

      - name: Create .env file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            rm -f .env
            touch .env

            echo DJANGO_SETTINGS_MODULE=${{ vars.DJANGO_SETTINGS_MODULE }} >> .env
            echo DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' >> .env
            echo DJANGO_DEBUG=${{ vars.DJANGO_DEBUG }} >> .env

            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env

  start_application:
    name: Start application
    runs-on: ubuntu-latest
    environment:
      name: prod
    needs: deploy
    steps:
      - name: Start appication
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}

            docker image prune -f

            docker pull ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest

            docker compose --file infra/docker-compose.stage.yml stop nginx backend db

            docker compose --file infra/docker-compose.stage.yml rm backend -f

            docker compose --env-file .env --file infra/docker-compose.yml up -d
